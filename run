#!/usr/bin/env python2

import os
import sys
from time import time


BOLD = '\033[1m'
RESET = '\033[0m'

WHITE = '\033[37m'
BLUE = '\033[34m'
GREEN = '\033[32m'


def print_heading(text):
    print "%s%s==>%s %s%s" % (BOLD, BLUE, WHITE, text, RESET)


def print_subheading(text):
    print "%s%s==>%s %s%s" % (BOLD, GREEN, WHITE, text, RESET)


if __name__ == '__main__':
    CURRENT_PATH = os.path.dirname(os.path.realpath(__file__))
    PROGRAMS_PATH = os.path.join(CURRENT_PATH, 'programs')

    if len(sys.argv) > 1:
        language_filter = sys.argv[1]
    else:
        language_filter = ""

    for test_program_type_dir in sorted(os.listdir(PROGRAMS_PATH)):

        test_program_type_path = os.path.join(PROGRAMS_PATH, test_program_type_dir)

        print_heading(test_program_type_dir)

        for implementation_dir in sorted(dir_name for dir_name in os.listdir(test_program_type_path)
                                         if '_' in dir_name):
            language, implementation = implementation_dir.split('_')

            print_subheading("%s (%s)" % (language, implementation))

            if language_filter not in implementation_dir.lower():
                print "Skipping due to filter %r" % language_filter
                continue

            test_program_path = os.path.join(test_program_type_path, implementation_dir)
            os.chdir(test_program_path)

            build_script_path = os.path.join(test_program_path, 'build')
            run_script_path = os.path.join(test_program_path, 'run')

            # Build "bin" if it doesn't already exist.
            if os.path.exists(build_script_path):
                if not os.path.exists(os.path.join(test_program_path, 'bin')):
                    print "Building."
                    os.system(build_script_path)

            if os.path.exists(run_script_path):
                print "Running test program."
                before = time()

                return_code = os.system(run_script_path)
                after = time()
                elapsed = after - before

                if return_code == 0:
                    print "Took %.3f seconds." % (elapsed,)
                else:
                    print "Failed."
